#!/usr/bin/env python3

# SPDX-FileCopyrightText: 2023 Enrique M.G. <quiqueiii@gmail.com>
#
# SPDX-License-Identifier: GPL-3.0-or-later

import edupals.network

import os
import sys
import glob
import subprocess
import pathlib
import fcntl
import ipaddress

LOCK_FILE = "/var/run/lliurex-autotags-network.lock"

TAGS_DIR = "/etc/lliurex-auto-upgrade/tags/"
tags = []

SYS_IFACE_TYPE_LOOPBACK = 772
SYS_ADDRESS_FAMILY_HW = 17
SYS_ADDRESS_FAMILY_IP4 = 2

def clear_tags():
	for path in (glob.glob(TAGS_DIR+"network.*")):
		os.remove(path)

def lock():
	fd = os.open(LOCK_FILE, os.O_RDWR | os.O_CREAT)
	fcntl.flock(fd, fcntl.LOCK_EX)

	return fd

def release(fd):
	fcntl.flock(fd, fcntl.LOCK_UN)
	os.close(fd)

if __name__=="__main__":

	if (not os.path.exists(TAGS_DIR)):
		sys.exit(0)

	try:
		lock_fd = lock()
		clear_tags()

		ifaces = edupals.network.Interface.interfaces()

		for iface in ifaces:

			addresses = iface.addresses()

			ntype = iface.get_type()

			if (ntype == SYS_IFACE_TYPE_LOOPBACK):
				continue

			for address in addresses:
				if (address.family == SYS_ADDRESS_FAMILY_HW):
					mac = address.address
					tags.append("network.mac.vendor.{0:02x}{1:02x}{2:02x}".format(mac.address[0],mac.address[1],mac.address[2]))
					tags.append("network.mac.{0:02x}{1:02x}{2:02x}{3:02x}{4:02x}{5:02x}".format(mac.address[0],mac.address[1],mac.address[2],mac.address[3],mac.address[4],mac.address[5]))

				if (address.family == SYS_ADDRESS_FAMILY_IP4):
					ip4 = edupals.network.get_network_ip(str(address.address),str(address.netmask))

					tags.append("network.ipv4.{0}.{1}.{2}.{3}".format(ip4.packed[0],ip4.packed[1],ip4.packed[2],ip4.packed[3]))

		release(lock_fd)

	except Exception as e:
		pass

	for tag in tags:
		p = pathlib.Path(TAGS_DIR + tag)
		p.touch()

